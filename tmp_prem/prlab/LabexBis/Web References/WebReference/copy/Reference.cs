//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3074.
// 
#pragma warning disable 1591

namespace LabexBis.WebReference {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="calypsoNSSoapBinding", Namespace="http://192.168.0.21:8080/InfonetWS/services/calypsoNS")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CalypsoException))]
    public partial class CalypsoWSNSService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getVersionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendMessage1OperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveMessage1OperationCompleted;
        
        private System.Threading.SendOrPostCallback ackMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUniqueIDOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CalypsoWSNSService() {
            this.Url = global::LabexBis.Properties.Settings.Default.LabexBis_WebReference_CalypsoWSNSService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getVersionListCompletedEventHandler getVersionListCompleted;
        
        /// <remarks/>
        public event sendMessageCompletedEventHandler sendMessageCompleted;
        
        /// <remarks/>
        public event sendMessage1CompletedEventHandler sendMessage1Completed;
        
        /// <remarks/>
        public event receiveMessageCompletedEventHandler receiveMessageCompleted;
        
        /// <remarks/>
        public event receiveMessage1CompletedEventHandler receiveMessage1Completed;
        
        /// <remarks/>
        public event ackMessageCompletedEventHandler ackMessageCompleted;
        
        /// <remarks/>
        public event getUniqueIDCompletedEventHandler getUniqueIDCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.calypso.infonet.com", ResponseNamespace="http://192.168.0.21:8080/InfonetWS/services/calypsoNS", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("getVersionListReturn")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public object[] getVersionList() {
            object[] results = this.Invoke("getVersionList", new object[0]);
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void getVersionListAsync() {
            this.getVersionListAsync(null);
        }
        
        /// <remarks/>
        public void getVersionListAsync(object userState) {
            if ((this.getVersionListOperationCompleted == null)) {
                this.getVersionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVersionListOperationCompleted);
            }
            this.InvokeAsync("getVersionList", new object[0], this.getVersionListOperationCompleted, userState);
        }
        
        private void OngetVersionListOperationCompleted(object arg) {
            if ((this.getVersionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVersionListCompleted(this, new getVersionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.calypso.infonet.com", ResponseNamespace="http://192.168.0.21:8080/InfonetWS/services/calypsoNS", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void sendMessage(string msg) {
            this.Invoke("sendMessage", new object[] {
                        msg});
        }
        
        /// <remarks/>
        public void sendMessageAsync(string msg) {
            this.sendMessageAsync(msg, null);
        }
        
        /// <remarks/>
        public void sendMessageAsync(string msg, object userState) {
            if ((this.sendMessageOperationCompleted == null)) {
                this.sendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMessageOperationCompleted);
            }
            this.InvokeAsync("sendMessage", new object[] {
                        msg}, this.sendMessageOperationCompleted, userState);
        }
        
        private void OnsendMessageOperationCompleted(object arg) {
            if ((this.sendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="sendMessage1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestElementName="sendMessage", RequestNamespace="http://webservice.calypso.infonet.com", ResponseElementName="sendMessageResponse", ResponseNamespace="http://192.168.0.21:8080/InfonetWS/services/calypsoNS", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void sendMessage(string msg, string HL7Version) {
            this.Invoke("sendMessage1", new object[] {
                        msg,
                        HL7Version});
        }
        
        /// <remarks/>
        public void sendMessage1Async(string msg, string HL7Version) {
            this.sendMessage1Async(msg, HL7Version, null);
        }
        
        /// <remarks/>
        public void sendMessage1Async(string msg, string HL7Version, object userState) {
            if ((this.sendMessage1OperationCompleted == null)) {
                this.sendMessage1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMessage1OperationCompleted);
            }
            this.InvokeAsync("sendMessage1", new object[] {
                        msg,
                        HL7Version}, this.sendMessage1OperationCompleted, userState);
        }
        
        private void OnsendMessage1OperationCompleted(object arg) {
            if ((this.sendMessage1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMessage1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.calypso.infonet.com", ResponseNamespace="http://192.168.0.21:8080/InfonetWS/services/calypsoNS", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("receiveMessageReturn")]
        public Message receiveMessage(string queueName) {
            object[] results = this.Invoke("receiveMessage", new object[] {
                        queueName});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void receiveMessageAsync(string queueName) {
            this.receiveMessageAsync(queueName, null);
        }
        
        /// <remarks/>
        public void receiveMessageAsync(string queueName, object userState) {
            if ((this.receiveMessageOperationCompleted == null)) {
                this.receiveMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveMessageOperationCompleted);
            }
            this.InvokeAsync("receiveMessage", new object[] {
                        queueName}, this.receiveMessageOperationCompleted, userState);
        }
        
        private void OnreceiveMessageOperationCompleted(object arg) {
            if ((this.receiveMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveMessageCompleted(this, new receiveMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="receiveMessage1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestElementName="receiveMessage", RequestNamespace="http://webservice.calypso.infonet.com", ResponseElementName="receiveMessageResponse", ResponseNamespace="http://192.168.0.21:8080/InfonetWS/services/calypsoNS", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("receiveMessageReturn")]
        public Message receiveMessage(string queueName, string HL7Version) {
            object[] results = this.Invoke("receiveMessage1", new object[] {
                        queueName,
                        HL7Version});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void receiveMessage1Async(string queueName, string HL7Version) {
            this.receiveMessage1Async(queueName, HL7Version, null);
        }
        
        /// <remarks/>
        public void receiveMessage1Async(string queueName, string HL7Version, object userState) {
            if ((this.receiveMessage1OperationCompleted == null)) {
                this.receiveMessage1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveMessage1OperationCompleted);
            }
            this.InvokeAsync("receiveMessage1", new object[] {
                        queueName,
                        HL7Version}, this.receiveMessage1OperationCompleted, userState);
        }
        
        private void OnreceiveMessage1OperationCompleted(object arg) {
            if ((this.receiveMessage1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveMessage1Completed(this, new receiveMessage1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.calypso.infonet.com", ResponseNamespace="http://192.168.0.21:8080/InfonetWS/services/calypsoNS", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void ackMessage(string msgID, string queueName) {
            this.Invoke("ackMessage", new object[] {
                        msgID,
                        queueName});
        }
        
        /// <remarks/>
        public void ackMessageAsync(string msgID, string queueName) {
            this.ackMessageAsync(msgID, queueName, null);
        }
        
        /// <remarks/>
        public void ackMessageAsync(string msgID, string queueName, object userState) {
            if ((this.ackMessageOperationCompleted == null)) {
                this.ackMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnackMessageOperationCompleted);
            }
            this.InvokeAsync("ackMessage", new object[] {
                        msgID,
                        queueName}, this.ackMessageOperationCompleted, userState);
        }
        
        private void OnackMessageOperationCompleted(object arg) {
            if ((this.ackMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ackMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.calypso.infonet.com", ResponseNamespace="http://192.168.0.21:8080/InfonetWS/services/calypsoNS", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getUniqueIDReturn")]
        public string getUniqueID() {
            object[] results = this.Invoke("getUniqueID", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUniqueIDAsync() {
            this.getUniqueIDAsync(null);
        }
        
        /// <remarks/>
        public void getUniqueIDAsync(object userState) {
            if ((this.getUniqueIDOperationCompleted == null)) {
                this.getUniqueIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUniqueIDOperationCompleted);
            }
            this.InvokeAsync("getUniqueID", new object[0], this.getUniqueIDOperationCompleted, userState);
        }
        
        private void OngetUniqueIDOperationCompleted(object arg) {
            if ((this.getUniqueIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUniqueIDCompleted(this, new getUniqueIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3074")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="exceptions.calypso.infonet.com")]
    public partial class CalypsoException {
        
        private string infoField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string info {
            get {
                return this.infoField;
            }
            set {
                this.infoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3074")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="valueobjects.calypso.infonet.com")]
    public partial class Message {
        
        private string textField;
        
        private string idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getVersionListCompletedEventHandler(object sender, getVersionListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVersionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVersionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void sendMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void sendMessage1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void receiveMessageCompletedEventHandler(object sender, receiveMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void receiveMessage1CompletedEventHandler(object sender, receiveMessage1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveMessage1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveMessage1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ackMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void getUniqueIDCompletedEventHandler(object sender, getUniqueIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUniqueIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUniqueIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591